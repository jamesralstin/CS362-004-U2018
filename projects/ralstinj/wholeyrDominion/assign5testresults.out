
|------------------------------------------------------------------CARD TEST 1: "smithy" START------------------------------------------------------------------|

**Initialized values for game
**Kingdom Cards: adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, sea_hag
**Number of players: 2
**Seed: 900

Hand count before "playSmithy" 5

Deck count before "playSmithy" 5

Played count before "playSmithy" 1 (should be 1 due to initial remove and replace for smithy card)

Expected hand count after "playSmithy" is 7, actual hand count after "playSmithy" 8
TEST FAIL, 7 AND 8 ARE NOT EQUAL

Expected played card count after "playSmithy" is 2, actual played count after "playSmithy" 2
TEST PASS, 2 AND 2 ARE EQUAL

Expected deck count after "playSmithy" is 2, actual deck count after "playSmithy" 1
TEST FAIL, 2 AND 1 ARE NOT EQUAL

Expected card value in last played card after "playSmithy" is 13, actual card value in last played card after "playSmithy" 13
TEST PASS, 13 AND 13 ARE EQUAL

Verifying no change to supply counts after "playSmithy"
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, 8 AND 8 ARE EQUAL
TEST PASS, 8 AND 8 ARE EQUAL
TEST PASS, 8 AND 8 ARE EQUAL
TEST PASS, 46 AND 46 ARE EQUAL
TEST PASS, 40 AND 40 ARE EQUAL
TEST PASS, 30 AND 30 ARE EQUAL
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, 8 AND 8 ARE EQUAL
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, 9 AND 9 ARE EQUAL
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL

Verify no change to other player(s) deck
TEST PASS, 10 AND 10 ARE EQUAL

|------------------------------------------------------------------CARD TEST 1: "smithy" FINISH-----------------------------------------------------------------|


|------------------------------------------------------------------CARD TEST 4: "adventurer" START------------------------------------------------------------------|

**Initialized values for game
**Kingdom Cards: adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, sea_hag
**Number of players: 2
**Seed: 600

|---------------------------------CARD TEST 4.1: General post state after played adventurer card---------------------------------|

Verify hand count increased by 1, expected value 6, actual value 7
TEST FAIL, 6 AND 7 ARE NOT EQUAL
Verify played card count increased by 1, expected value 1, actual value 0
TEST FAIL, 1 AND 0 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 0
TEST FAIL, 7 AND 0 ARE NOT EQUAL

|---------------------------------CARD TEST 4.2: Verify two treasures added------------------------------------------------------|

Verifying two new treasures have been added, expected count 5, actual count 5
TEST PASS, 5 AND 5 ARE EQUAL

|---------------------------------CARD TEST 4.3: Only one treasure card exists in deck-------------------------------------------|

Verifying one new treasures have been added, expected count 6, actual count 6
TEST PASS, 6 AND 6 ARE EQUAL

|------------------------------------------------------------------CARD TEST 4: "adventurer" FINISH-----------------------------------------------------------------|


|------------------------------------------------------------------CARD TEST 1: "council room" START------------------------------------------------------------------|

**Initialized values for game
**Kingdom Cards: adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, sea_hag
**Number of players: 2
**Seed: 900

Hand count before "doCouncilRoomEffect" 5

Deck count before "doCouncilRoomEffect" 5

Played count before "doCouncilRoomEffect" 1 (should be 1 due to initial remove and replace for council room card)

Expected hand count of current player after "doCouncilRoomEffect" is 8, actual hand count of current after "doCouncilRoomEffect" 9
TEST FAIL, 8 AND 9 ARE NOT EQUAL

Expected hand count of opposing player after "doCouncilRoomEffect" is 1, actual hand count of current after "doCouncilRoomEffect" 1
TEST PASS, 1 AND 1 ARE EQUAL

Expected played card count after "doCouncilRoomEffect" is 2, actual played count after "doCouncilRoomEffect" 2
TEST PASS, 2 AND 2 ARE EQUAL

Expected deck count of current player after "doCouncilRoomEffect" is 1, actual deck count after "doCouncilRoomEffect" 0
TEST FAIL, 1 AND 0 ARE NOT EQUAL

Expected card value in last played card after "doCouncilRoomEffect" is 8, actual card value in last played card after "doCouncilRoomEffect" 8
TEST PASS, 8 AND 8 ARE EQUAL

Expected number of buys for current player after "doCouncilRoomEffect" is 2, actual number of buys for current player after "doCouncilRoomEffect" 2
TEST PASS, 2 AND 2 ARE EQUAL

Verifying no change to supply counts after "doCouncilRoomEffect"
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, 8 AND 8 ARE EQUAL
TEST PASS, 8 AND 8 ARE EQUAL
TEST PASS, 8 AND 8 ARE EQUAL
TEST PASS, 46 AND 46 ARE EQUAL
TEST PASS, 40 AND 40 ARE EQUAL
TEST PASS, 30 AND 30 ARE EQUAL
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, 9 AND 9 ARE EQUAL
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, 8 AND 8 ARE EQUAL
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL
TEST PASS, 10 AND 10 ARE EQUAL
TEST PASS, -1 AND -1 ARE EQUAL

|------------------------------------------------------------------CARD TEST 1: "council room" FINISH-----------------------------------------------------------------|

TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 85 AND 86 ARE NOT EQUAL
Comparing played card count
TEST PASS, 298 AND 298 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 482 AND 481 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 383 AND 384 ARE NOT EQUAL
Comparing played card count
TEST PASS, 379 AND 379 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 58 AND 57 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 2
TEST FAIL, 81 AND 82 ARE NOT EQUAL
Comparing played card count
TEST PASS, 366 AND 366 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 2
TEST FAIL, 354 AND 353 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 216 AND 217 ARE NOT EQUAL
Comparing played card count
TEST PASS, 123 AND 123 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 107 AND 106 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 418 AND 419 ARE NOT EQUAL
Comparing played card count
TEST PASS, 356 AND 356 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 486 AND 485 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 493 AND 494 ARE NOT EQUAL
Comparing played card count
TEST PASS, 91 AND 91 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 46 AND 45 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 433 AND 434 ARE NOT EQUAL
Comparing played card count
TEST PASS, 27 AND 27 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 385 AND 384 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 3
TEST FAIL, 375 AND 376 ARE NOT EQUAL
Comparing played card count
TEST PASS, 123 AND 123 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 3
TEST FAIL, 320 AND 319 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 149 AND 150 ARE NOT EQUAL
Comparing played card count
TEST PASS, 97 AND 97 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 339 AND 338 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 158 AND 159 ARE NOT EQUAL
Comparing played card count
TEST PASS, 315 AND 315 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 433 AND 432 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 342 AND 343 ARE NOT EQUAL
Comparing played card count
TEST PASS, 430 AND 430 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 48 AND 47 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 465 AND 466 ARE NOT EQUAL
Comparing played card count
TEST PASS, 189 AND 189 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 150 AND 149 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 46 AND 47 ARE NOT EQUAL
Comparing played card count
TEST PASS, 449 AND 449 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 71 AND 70 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 148 AND 149 ARE NOT EQUAL
Comparing played card count
TEST PASS, 308 AND 308 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 248 AND 247 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 2
TEST FAIL, 313 AND 314 ARE NOT EQUAL
Comparing played card count
TEST PASS, 221 AND 221 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 2
TEST FAIL, 409 AND 408 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 455 AND 456 ARE NOT EQUAL
Comparing played card count
TEST PASS, 115 AND 115 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 462 AND 461 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 126 AND 127 ARE NOT EQUAL
Comparing played card count
TEST PASS, 166 AND 166 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 284 AND 283 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 79 AND 80 ARE NOT EQUAL
Comparing played card count
TEST PASS, 120 AND 120 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 350 AND 349 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 191 AND 192 ARE NOT EQUAL
Comparing played card count
TEST PASS, 495 AND 495 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 353 AND 352 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 439 AND 440 ARE NOT EQUAL
Comparing played card count
TEST PASS, 468 AND 468 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 226 AND 225 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 2
TEST FAIL, 111 AND 112 ARE NOT EQUAL
Comparing played card count
TEST PASS, 64 AND 64 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 2
TEST FAIL, 375 AND 374 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 107 AND 108 ARE NOT EQUAL
Comparing played card count
TEST PASS, 420 AND 420 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, -2 AND 4 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 447 AND 448 ARE NOT EQUAL
Comparing played card count
TEST PASS, 384 AND 384 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 475 AND 474 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 9 AND 10 ARE NOT EQUAL
Comparing played card count
TEST PASS, 431 AND 431 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 452 AND 451 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 320 AND 321 ARE NOT EQUAL
Comparing played card count
TEST PASS, 421 AND 421 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 349 AND 348 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 2
TEST FAIL, 363 AND 364 ARE NOT EQUAL
Comparing played card count
TEST PASS, 368 AND 368 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 2
TEST FAIL, 167 AND 166 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 269 AND 270 ARE NOT EQUAL
Comparing played card count
TEST PASS, 480 AND 480 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 329 AND 328 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 334 AND 335 ARE NOT EQUAL
Comparing played card count
TEST PASS, 49 AND 49 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 490 AND 489 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 2
TEST FAIL, 246 AND 247 ARE NOT EQUAL
Comparing played card count
TEST PASS, 381 AND 381 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 2
TEST FAIL, 147 AND 146 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 360 AND 361 ARE NOT EQUAL
Comparing played card count
TEST PASS, 17 AND 17 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 55 AND 54 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 437 AND 438 ARE NOT EQUAL
Comparing played card count
TEST PASS, 332 AND 332 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 139 AND 138 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 27 AND 28 ARE NOT EQUAL
Comparing played card count
TEST PASS, 362 AND 362 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 208 AND 207 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 278 AND 279 ARE NOT EQUAL
Comparing played card count
TEST PASS, 291 AND 291 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 177 AND 176 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 404 AND 405 ARE NOT EQUAL
Comparing played card count
TEST PASS, 344 AND 344 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 282 AND 281 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 456 AND 457 ARE NOT EQUAL
Comparing played card count
TEST PASS, 127 AND 127 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 107 AND 106 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 59 AND 60 ARE NOT EQUAL
Comparing played card count
TEST PASS, 58 AND 58 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 387 AND 386 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 2
TEST FAIL, 446 AND 447 ARE NOT EQUAL
Comparing played card count
TEST PASS, 380 AND 380 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 2
TEST FAIL, 135 AND 134 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 2
TEST FAIL, 219 AND 220 ARE NOT EQUAL
Comparing played card count
TEST PASS, 128 AND 128 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 2
TEST FAIL, 271 AND 270 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 377 AND 378 ARE NOT EQUAL
Comparing played card count
TEST PASS, 89 AND 89 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 314 AND 313 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 384 AND 385 ARE NOT EQUAL
Comparing played card count
TEST PASS, 113 AND 113 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 117 AND 116 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 3
TEST FAIL, 350 AND 351 ARE NOT EQUAL
Comparing played card count
TEST PASS, 242 AND 242 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 3
TEST FAIL, 317 AND 316 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 61 AND 62 ARE NOT EQUAL
Comparing played card count
TEST PASS, 296 AND 296 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 27 AND 26 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 197 AND 198 ARE NOT EQUAL
Comparing played card count
TEST PASS, 257 AND 257 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 322 AND 321 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 129 AND 130 ARE NOT EQUAL
Comparing played card count
TEST PASS, 302 AND 302 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 371 AND 370 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 376 AND 377 ARE NOT EQUAL
Comparing played card count
TEST PASS, 361 AND 361 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 446 AND 445 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 154 AND 155 ARE NOT EQUAL
Comparing played card count
TEST PASS, 422 AND 422 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 135 AND 134 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 466 AND 467 ARE NOT EQUAL
Comparing played card count
TEST PASS, 204 AND 204 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 111 AND 110 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 237 AND 238 ARE NOT EQUAL
Comparing played card count
TEST PASS, 499 AND 499 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 168 AND 167 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 308 AND 309 ARE NOT EQUAL
Comparing played card count
TEST PASS, 289 AND 289 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 245 AND 244 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 2
TEST FAIL, 370 AND 371 ARE NOT EQUAL
Comparing played card count
TEST PASS, 486 AND 486 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 2
TEST FAIL, 14 AND 13 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 191 AND 192 ARE NOT EQUAL
Comparing played card count
TEST PASS, 267 AND 267 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 88 AND 87 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 208 AND 209 ARE NOT EQUAL
Comparing played card count
TEST PASS, 86 AND 86 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 26 AND 25 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 204 AND 205 ARE NOT EQUAL
Comparing played card count
TEST PASS, 162 AND 162 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 445 AND 444 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 2
TEST FAIL, 392 AND 393 ARE NOT EQUAL
Comparing played card count
TEST PASS, 401 AND 401 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 2
TEST FAIL, 59 AND 58 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 2
TEST FAIL, 210 AND 211 ARE NOT EQUAL
Comparing played card count
TEST PASS, 450 AND 450 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 2
TEST FAIL, 462 AND 461 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 217 AND 218 ARE NOT EQUAL
Comparing played card count
TEST PASS, 74 AND 74 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 213 AND 212 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 389 AND 390 ARE NOT EQUAL
Comparing played card count
TEST PASS, 138 AND 138 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 349 AND 348 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 465 AND 466 ARE NOT EQUAL
Comparing played card count
TEST PASS, 473 AND 473 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 316 AND 315 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 384 AND 385 ARE NOT EQUAL
Comparing played card count
TEST PASS, 485 AND 485 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 191 AND 190 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 297 AND 298 ARE NOT EQUAL
Comparing played card count
TEST PASS, 150 AND 150 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 325 AND 324 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 321 AND 322 ARE NOT EQUAL
Comparing played card count
TEST PASS, 151 AND 151 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 245 AND 244 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 2 AND 3 ARE NOT EQUAL
Comparing played card count
TEST PASS, 322 AND 322 ARE EQUAL
Comparing last played card, should be smithy
TEST FAIL, 13 AND 0 ARE NOT EQUAL
Comparing deck count of player 1
TEST FAIL, 176 AND 175 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 7 AND 8 ARE NOT EQUAL
Comparing played card count
TEST PASS, 369 AND 369 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 389 AND 388 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 338 AND 339 ARE NOT EQUAL
Comparing played card count
TEST PASS, 475 AND 475 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 73 AND 72 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 75 AND 76 ARE NOT EQUAL
Comparing played card count
TEST PASS, 333 AND 333 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 6 AND 5 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 180 AND 181 ARE NOT EQUAL
Comparing played card count
TEST PASS, 120 AND 120 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 364 AND 363 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 141 AND 142 ARE NOT EQUAL
Comparing played card count
TEST PASS, 216 AND 216 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 376 AND 375 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 364 AND 365 ARE NOT EQUAL
Comparing played card count
TEST PASS, 334 AND 334 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 420 AND 419 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 325 AND 326 ARE NOT EQUAL
Comparing played card count
TEST PASS, 28 AND 28 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 369 AND 368 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 314 AND 315 ARE NOT EQUAL
Comparing played card count
TEST PASS, 183 AND 183 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 229 AND 228 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 30 AND 31 ARE NOT EQUAL
Comparing played card count
TEST PASS, 474 AND 474 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 400 AND 399 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 458 AND 459 ARE NOT EQUAL
Comparing played card count
TEST PASS, 29 AND 29 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 170 AND 169 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 373 AND 374 ARE NOT EQUAL
Comparing played card count
TEST PASS, 341 AND 341 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 428 AND 427 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 3
TEST FAIL, 171 AND 172 ARE NOT EQUAL
Comparing played card count
TEST PASS, 413 AND 413 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 3
TEST FAIL, 107 AND 106 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 53 AND 54 ARE NOT EQUAL
Comparing played card count
TEST PASS, 496 AND 496 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 110 AND 109 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 335 AND 336 ARE NOT EQUAL
Comparing played card count
TEST PASS, 342 AND 342 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 244 AND 243 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 31 AND 32 ARE NOT EQUAL
Comparing played card count
TEST PASS, 456 AND 456 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 365 AND 364 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 44 AND 45 ARE NOT EQUAL
Comparing played card count
TEST PASS, 57 AND 57 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 140 AND 139 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 11 AND 12 ARE NOT EQUAL
Comparing played card count
TEST PASS, 405 AND 405 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 281 AND 280 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 297 AND 298 ARE NOT EQUAL
Comparing played card count
TEST PASS, 82 AND 82 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 351 AND 350 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 2
TEST FAIL, 381 AND 382 ARE NOT EQUAL
Comparing played card count
TEST PASS, 367 AND 367 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 2
TEST FAIL, 365 AND 364 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 3
TEST FAIL, 419 AND 420 ARE NOT EQUAL
Comparing played card count
TEST PASS, 380 AND 380 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 3
TEST FAIL, 68 AND 67 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 2
TEST FAIL, 219 AND 220 ARE NOT EQUAL
Comparing played card count
TEST PASS, 128 AND 128 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 2
TEST FAIL, 271 AND 270 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 377 AND 378 ARE NOT EQUAL
Comparing played card count
TEST PASS, 89 AND 89 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 314 AND 313 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 384 AND 385 ARE NOT EQUAL
Comparing played card count
TEST PASS, 113 AND 113 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 117 AND 116 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 3
TEST FAIL, 350 AND 351 ARE NOT EQUAL
Comparing played card count
TEST PASS, 242 AND 242 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 3
TEST FAIL, 317 AND 316 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 61 AND 62 ARE NOT EQUAL
Comparing played card count
TEST PASS, 296 AND 296 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 27 AND 26 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 197 AND 198 ARE NOT EQUAL
Comparing played card count
TEST PASS, 257 AND 257 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 322 AND 321 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 129 AND 130 ARE NOT EQUAL
Comparing played card count
TEST PASS, 302 AND 302 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 371 AND 370 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 376 AND 377 ARE NOT EQUAL
Comparing played card count
TEST PASS, 361 AND 361 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 446 AND 445 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 154 AND 155 ARE NOT EQUAL
Comparing played card count
TEST PASS, 422 AND 422 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 135 AND 134 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 466 AND 467 ARE NOT EQUAL
Comparing played card count
TEST PASS, 204 AND 204 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 111 AND 110 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 237 AND 238 ARE NOT EQUAL
Comparing played card count
TEST PASS, 499 AND 499 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 168 AND 167 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 308 AND 309 ARE NOT EQUAL
Comparing played card count
TEST PASS, 289 AND 289 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 245 AND 244 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 2
TEST FAIL, 370 AND 371 ARE NOT EQUAL
Comparing played card count
TEST PASS, 486 AND 486 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 2
TEST FAIL, 14 AND 13 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 191 AND 192 ARE NOT EQUAL
Comparing played card count
TEST PASS, 267 AND 267 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 88 AND 87 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 1
TEST FAIL, 208 AND 209 ARE NOT EQUAL
Comparing played card count
TEST PASS, 86 AND 86 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 1
TEST FAIL, 26 AND 25 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 0
TEST FAIL, 204 AND 205 ARE NOT EQUAL
Comparing played card count
TEST PASS, 162 AND 162 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 0
TEST FAIL, 445 AND 444 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 2
TEST FAIL, 392 AND 393 ARE NOT EQUAL
Comparing played card count
TEST PASS, 401 AND 401 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 2
TEST FAIL, 59 AND 58 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Comparing hand count of player 2
TEST FAIL, 210 AND 211 ARE NOT EQUAL
Comparing played card count
TEST PASS, 450 AND 450 ARE EQUAL
Comparing last played card, should be smithy
TEST PASS, 13 AND 13 ARE EQUAL
Comparing deck count of player 2
TEST FAIL, 462 AND 461 ARE NOT EQUAL

**TESTING COMPLETE**

TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 178, actual value 179
TEST FAIL, 178 AND 179 ARE NOT EQUAL
Verify played card count increased by 1, expected value 128, actual value 127
TEST FAIL, 128 AND 127 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 1
TEST FAIL, 7 AND 1 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 6, actual count 6
TEST PASS, 6 AND 6 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 208, actual value 207
TEST FAIL, 208 AND 207 ARE NOT EQUAL
Verify played card count increased by 1, expected value 316, actual value 315
TEST FAIL, 316 AND 315 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 0
TEST FAIL, 7 AND 0 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 315, actual value 314
TEST FAIL, 315 AND 314 ARE NOT EQUAL
Verify played card count increased by 1, expected value 368, actual value 367
TEST FAIL, 368 AND 367 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 95, actual value 96
TEST FAIL, 95 AND 96 ARE NOT EQUAL
Verify played card count increased by 1, expected value 292, actual value 291
TEST FAIL, 292 AND 291 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 7, actual count 7
TEST PASS, 7 AND 7 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 454, actual value 455
TEST FAIL, 454 AND 455 ARE NOT EQUAL
Verify played card count increased by 1, expected value 115, actual value 114
TEST FAIL, 115 AND 114 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 12, actual count 12
TEST PASS, 12 AND 12 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 235, actual value 236
TEST FAIL, 235 AND 236 ARE NOT EQUAL
Verify played card count increased by 1, expected value 283, actual value 282
TEST FAIL, 283 AND 282 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 1
TEST FAIL, 7 AND 1 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 12, actual count 12
TEST PASS, 12 AND 12 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 50, actual value 51
TEST FAIL, 50 AND 51 ARE NOT EQUAL
Verify played card count increased by 1, expected value 409, actual value 408
TEST FAIL, 409 AND 408 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 7, actual count 7
TEST PASS, 7 AND 7 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 147, actual value 146
TEST FAIL, 147 AND 146 ARE NOT EQUAL
Verify played card count increased by 1, expected value 216, actual value 215
TEST FAIL, 216 AND 215 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 86, actual value 87
TEST FAIL, 86 AND 87 ARE NOT EQUAL
Verify played card count increased by 1, expected value 110, actual value 109
TEST FAIL, 110 AND 109 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 9, actual count 9
TEST PASS, 9 AND 9 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 129, actual value 128
TEST FAIL, 129 AND 128 ARE NOT EQUAL
Verify played card count increased by 1, expected value 372, actual value 371
TEST FAIL, 372 AND 371 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 0
TEST FAIL, 7 AND 0 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 188, actual value 187
TEST FAIL, 188 AND 187 ARE NOT EQUAL
Verify played card count increased by 1, expected value 117, actual value 116
TEST FAIL, 117 AND 116 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 269, actual value 268
TEST FAIL, 269 AND 268 ARE NOT EQUAL
Verify played card count increased by 1, expected value 348, actual value 347
TEST FAIL, 348 AND 347 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 262, actual value 261
TEST FAIL, 262 AND 261 ARE NOT EQUAL
Verify played card count increased by 1, expected value 6, actual value 5
TEST FAIL, 6 AND 5 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 14, actual value 13
TEST FAIL, 14 AND 13 ARE NOT EQUAL
Verify played card count increased by 1, expected value 361, actual value 360
TEST FAIL, 361 AND 360 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 36, actual value 37
TEST FAIL, 36 AND 37 ARE NOT EQUAL
Verify played card count increased by 1, expected value 357, actual value 356
TEST FAIL, 357 AND 356 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 8, actual count 8
TEST PASS, 8 AND 8 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 7, actual value 6
TEST FAIL, 7 AND 6 ARE NOT EQUAL
Verify played card count increased by 1, expected value 258, actual value 257
TEST FAIL, 258 AND 257 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 365, actual value 364
TEST FAIL, 365 AND 364 ARE NOT EQUAL
Verify played card count increased by 1, expected value 407, actual value 406
TEST FAIL, 407 AND 406 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 54, actual value 53
TEST FAIL, 54 AND 53 ARE NOT EQUAL
Verify played card count increased by 1, expected value 194, actual value 193
TEST FAIL, 194 AND 193 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 396, actual value 395
TEST FAIL, 396 AND 395 ARE NOT EQUAL
Verify played card count increased by 1, expected value 352, actual value 351
TEST FAIL, 352 AND 351 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 135, actual value 136
TEST FAIL, 135 AND 136 ARE NOT EQUAL
Verify played card count increased by 1, expected value 115, actual value 114
TEST FAIL, 115 AND 114 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 22, actual count 22
TEST PASS, 22 AND 22 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 154, actual value 153
TEST FAIL, 154 AND 153 ARE NOT EQUAL
Verify played card count increased by 1, expected value 273, actual value 272
TEST FAIL, 273 AND 272 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 49, actual value 48
TEST FAIL, 49 AND 48 ARE NOT EQUAL
Verify played card count increased by 1, expected value 372, actual value 371
TEST FAIL, 372 AND 371 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 188, actual value 187
TEST FAIL, 188 AND 187 ARE NOT EQUAL
Verify played card count increased by 1, expected value 117, actual value 116
TEST FAIL, 117 AND 116 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 269, actual value 268
TEST FAIL, 269 AND 268 ARE NOT EQUAL
Verify played card count increased by 1, expected value 348, actual value 347
TEST FAIL, 348 AND 347 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 262, actual value 261
TEST FAIL, 262 AND 261 ARE NOT EQUAL
Verify played card count increased by 1, expected value 6, actual value 5
TEST FAIL, 6 AND 5 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 14, actual value 13
TEST FAIL, 14 AND 13 ARE NOT EQUAL
Verify played card count increased by 1, expected value 361, actual value 360
TEST FAIL, 361 AND 360 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 36, actual value 37
TEST FAIL, 36 AND 37 ARE NOT EQUAL
Verify played card count increased by 1, expected value 357, actual value 356
TEST FAIL, 357 AND 356 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 8, actual count 8
TEST PASS, 8 AND 8 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 7, actual value 6
TEST FAIL, 7 AND 6 ARE NOT EQUAL
Verify played card count increased by 1, expected value 258, actual value 257
TEST FAIL, 258 AND 257 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 365, actual value 364
TEST FAIL, 365 AND 364 ARE NOT EQUAL
Verify played card count increased by 1, expected value 407, actual value 406
TEST FAIL, 407 AND 406 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 54, actual value 53
TEST FAIL, 54 AND 53 ARE NOT EQUAL
Verify played card count increased by 1, expected value 194, actual value 193
TEST FAIL, 194 AND 193 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 396, actual value 395
TEST FAIL, 396 AND 395 ARE NOT EQUAL
Verify played card count increased by 1, expected value 352, actual value 351
TEST FAIL, 352 AND 351 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 135, actual value 136
TEST FAIL, 135 AND 136 ARE NOT EQUAL
Verify played card count increased by 1, expected value 115, actual value 114
TEST FAIL, 115 AND 114 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 22, actual count 22
TEST PASS, 22 AND 22 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 154, actual value 153
TEST FAIL, 154 AND 153 ARE NOT EQUAL
Verify played card count increased by 1, expected value 273, actual value 272
TEST FAIL, 273 AND 272 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 49, actual value 48
TEST FAIL, 49 AND 48 ARE NOT EQUAL
Verify played card count increased by 1, expected value 372, actual value 371
TEST FAIL, 372 AND 371 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 188, actual value 187
TEST FAIL, 188 AND 187 ARE NOT EQUAL
Verify played card count increased by 1, expected value 117, actual value 116
TEST FAIL, 117 AND 116 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 269, actual value 268
TEST FAIL, 269 AND 268 ARE NOT EQUAL
Verify played card count increased by 1, expected value 348, actual value 347
TEST FAIL, 348 AND 347 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 262, actual value 261
TEST FAIL, 262 AND 261 ARE NOT EQUAL
Verify played card count increased by 1, expected value 6, actual value 5
TEST FAIL, 6 AND 5 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 14, actual value 13
TEST FAIL, 14 AND 13 ARE NOT EQUAL
Verify played card count increased by 1, expected value 361, actual value 360
TEST FAIL, 361 AND 360 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 36, actual value 37
TEST FAIL, 36 AND 37 ARE NOT EQUAL
Verify played card count increased by 1, expected value 357, actual value 356
TEST FAIL, 357 AND 356 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 8, actual count 8
TEST PASS, 8 AND 8 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 7, actual value 6
TEST FAIL, 7 AND 6 ARE NOT EQUAL
Verify played card count increased by 1, expected value 258, actual value 257
TEST FAIL, 258 AND 257 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 365, actual value 364
TEST FAIL, 365 AND 364 ARE NOT EQUAL
Verify played card count increased by 1, expected value 407, actual value 406
TEST FAIL, 407 AND 406 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 54, actual value 53
TEST FAIL, 54 AND 53 ARE NOT EQUAL
Verify played card count increased by 1, expected value 194, actual value 193
TEST FAIL, 194 AND 193 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 396, actual value 395
TEST FAIL, 396 AND 395 ARE NOT EQUAL
Verify played card count increased by 1, expected value 352, actual value 351
TEST FAIL, 352 AND 351 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 135, actual value 136
TEST FAIL, 135 AND 136 ARE NOT EQUAL
Verify played card count increased by 1, expected value 115, actual value 114
TEST FAIL, 115 AND 114 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 22, actual count 22
TEST PASS, 22 AND 22 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 154, actual value 153
TEST FAIL, 154 AND 153 ARE NOT EQUAL
Verify played card count increased by 1, expected value 273, actual value 272
TEST FAIL, 273 AND 272 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 49, actual value 48
TEST FAIL, 49 AND 48 ARE NOT EQUAL
Verify played card count increased by 1, expected value 372, actual value 371
TEST FAIL, 372 AND 371 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 188, actual value 187
TEST FAIL, 188 AND 187 ARE NOT EQUAL
Verify played card count increased by 1, expected value 117, actual value 116
TEST FAIL, 117 AND 116 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 269, actual value 268
TEST FAIL, 269 AND 268 ARE NOT EQUAL
Verify played card count increased by 1, expected value 348, actual value 347
TEST FAIL, 348 AND 347 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 262, actual value 261
TEST FAIL, 262 AND 261 ARE NOT EQUAL
Verify played card count increased by 1, expected value 6, actual value 5
TEST FAIL, 6 AND 5 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 14, actual value 13
TEST FAIL, 14 AND 13 ARE NOT EQUAL
Verify played card count increased by 1, expected value 361, actual value 360
TEST FAIL, 361 AND 360 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 36, actual value 37
TEST FAIL, 36 AND 37 ARE NOT EQUAL
Verify played card count increased by 1, expected value 357, actual value 356
TEST FAIL, 357 AND 356 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 8, actual count 8
TEST PASS, 8 AND 8 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 7, actual value 6
TEST FAIL, 7 AND 6 ARE NOT EQUAL
Verify played card count increased by 1, expected value 258, actual value 257
TEST FAIL, 258 AND 257 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 365, actual value 364
TEST FAIL, 365 AND 364 ARE NOT EQUAL
Verify played card count increased by 1, expected value 407, actual value 406
TEST FAIL, 407 AND 406 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 54, actual value 53
TEST FAIL, 54 AND 53 ARE NOT EQUAL
Verify played card count increased by 1, expected value 194, actual value 193
TEST FAIL, 194 AND 193 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 396, actual value 395
TEST FAIL, 396 AND 395 ARE NOT EQUAL
Verify played card count increased by 1, expected value 352, actual value 351
TEST FAIL, 352 AND 351 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 135, actual value 136
TEST FAIL, 135 AND 136 ARE NOT EQUAL
Verify played card count increased by 1, expected value 115, actual value 114
TEST FAIL, 115 AND 114 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 22, actual count 22
TEST PASS, 22 AND 22 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 154, actual value 153
TEST FAIL, 154 AND 153 ARE NOT EQUAL
Verify played card count increased by 1, expected value 273, actual value 272
TEST FAIL, 273 AND 272 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 49, actual value 48
TEST FAIL, 49 AND 48 ARE NOT EQUAL
Verify played card count increased by 1, expected value 372, actual value 371
TEST FAIL, 372 AND 371 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 188, actual value 187
TEST FAIL, 188 AND 187 ARE NOT EQUAL
Verify played card count increased by 1, expected value 117, actual value 116
TEST FAIL, 117 AND 116 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 269, actual value 268
TEST FAIL, 269 AND 268 ARE NOT EQUAL
Verify played card count increased by 1, expected value 348, actual value 347
TEST FAIL, 348 AND 347 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 262, actual value 261
TEST FAIL, 262 AND 261 ARE NOT EQUAL
Verify played card count increased by 1, expected value 6, actual value 5
TEST FAIL, 6 AND 5 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 14, actual value 13
TEST FAIL, 14 AND 13 ARE NOT EQUAL
Verify played card count increased by 1, expected value 361, actual value 360
TEST FAIL, 361 AND 360 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 36, actual value 37
TEST FAIL, 36 AND 37 ARE NOT EQUAL
Verify played card count increased by 1, expected value 357, actual value 356
TEST FAIL, 357 AND 356 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 8, actual count 8
TEST PASS, 8 AND 8 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 7, actual value 6
TEST FAIL, 7 AND 6 ARE NOT EQUAL
Verify played card count increased by 1, expected value 258, actual value 257
TEST FAIL, 258 AND 257 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 365, actual value 364
TEST FAIL, 365 AND 364 ARE NOT EQUAL
Verify played card count increased by 1, expected value 407, actual value 406
TEST FAIL, 407 AND 406 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 54, actual value 53
TEST FAIL, 54 AND 53 ARE NOT EQUAL
Verify played card count increased by 1, expected value 194, actual value 193
TEST FAIL, 194 AND 193 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 396, actual value 395
TEST FAIL, 396 AND 395 ARE NOT EQUAL
Verify played card count increased by 1, expected value 352, actual value 351
TEST FAIL, 352 AND 351 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 135, actual value 136
TEST FAIL, 135 AND 136 ARE NOT EQUAL
Verify played card count increased by 1, expected value 115, actual value 114
TEST FAIL, 115 AND 114 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 22, actual count 22
TEST PASS, 22 AND 22 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 154, actual value 153
TEST FAIL, 154 AND 153 ARE NOT EQUAL
Verify played card count increased by 1, expected value 273, actual value 272
TEST FAIL, 273 AND 272 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 49, actual value 48
TEST FAIL, 49 AND 48 ARE NOT EQUAL
Verify played card count increased by 1, expected value 372, actual value 371
TEST FAIL, 372 AND 371 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 188, actual value 187
TEST FAIL, 188 AND 187 ARE NOT EQUAL
Verify played card count increased by 1, expected value 117, actual value 116
TEST FAIL, 117 AND 116 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 269, actual value 268
TEST FAIL, 269 AND 268 ARE NOT EQUAL
Verify played card count increased by 1, expected value 348, actual value 347
TEST FAIL, 348 AND 347 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 262, actual value 261
TEST FAIL, 262 AND 261 ARE NOT EQUAL
Verify played card count increased by 1, expected value 6, actual value 5
TEST FAIL, 6 AND 5 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 14, actual value 13
TEST FAIL, 14 AND 13 ARE NOT EQUAL
Verify played card count increased by 1, expected value 361, actual value 360
TEST FAIL, 361 AND 360 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 36, actual value 37
TEST FAIL, 36 AND 37 ARE NOT EQUAL
Verify played card count increased by 1, expected value 357, actual value 356
TEST FAIL, 357 AND 356 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 8, actual count 8
TEST PASS, 8 AND 8 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 7, actual value 6
TEST FAIL, 7 AND 6 ARE NOT EQUAL
Verify played card count increased by 1, expected value 258, actual value 257
TEST FAIL, 258 AND 257 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 365, actual value 364
TEST FAIL, 365 AND 364 ARE NOT EQUAL
Verify played card count increased by 1, expected value 407, actual value 406
TEST FAIL, 407 AND 406 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 54, actual value 53
TEST FAIL, 54 AND 53 ARE NOT EQUAL
Verify played card count increased by 1, expected value 194, actual value 193
TEST FAIL, 194 AND 193 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 396, actual value 395
TEST FAIL, 396 AND 395 ARE NOT EQUAL
Verify played card count increased by 1, expected value 352, actual value 351
TEST FAIL, 352 AND 351 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 135, actual value 136
TEST FAIL, 135 AND 136 ARE NOT EQUAL
Verify played card count increased by 1, expected value 115, actual value 114
TEST FAIL, 115 AND 114 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 22, actual count 22
TEST PASS, 22 AND 22 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 154, actual value 153
TEST FAIL, 154 AND 153 ARE NOT EQUAL
Verify played card count increased by 1, expected value 273, actual value 272
TEST FAIL, 273 AND 272 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 49, actual value 48
TEST FAIL, 49 AND 48 ARE NOT EQUAL
Verify played card count increased by 1, expected value 372, actual value 371
TEST FAIL, 372 AND 371 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 188, actual value 187
TEST FAIL, 188 AND 187 ARE NOT EQUAL
Verify played card count increased by 1, expected value 117, actual value 116
TEST FAIL, 117 AND 116 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 269, actual value 268
TEST FAIL, 269 AND 268 ARE NOT EQUAL
Verify played card count increased by 1, expected value 348, actual value 347
TEST FAIL, 348 AND 347 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 262, actual value 261
TEST FAIL, 262 AND 261 ARE NOT EQUAL
Verify played card count increased by 1, expected value 6, actual value 5
TEST FAIL, 6 AND 5 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 14, actual value 13
TEST FAIL, 14 AND 13 ARE NOT EQUAL
Verify played card count increased by 1, expected value 361, actual value 360
TEST FAIL, 361 AND 360 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 36, actual value 37
TEST FAIL, 36 AND 37 ARE NOT EQUAL
Verify played card count increased by 1, expected value 357, actual value 356
TEST FAIL, 357 AND 356 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 8, actual count 8
TEST PASS, 8 AND 8 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 7, actual value 6
TEST FAIL, 7 AND 6 ARE NOT EQUAL
Verify played card count increased by 1, expected value 258, actual value 257
TEST FAIL, 258 AND 257 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 365, actual value 364
TEST FAIL, 365 AND 364 ARE NOT EQUAL
Verify played card count increased by 1, expected value 407, actual value 406
TEST FAIL, 407 AND 406 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 54, actual value 53
TEST FAIL, 54 AND 53 ARE NOT EQUAL
Verify played card count increased by 1, expected value 194, actual value 193
TEST FAIL, 194 AND 193 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 396, actual value 395
TEST FAIL, 396 AND 395 ARE NOT EQUAL
Verify played card count increased by 1, expected value 352, actual value 351
TEST FAIL, 352 AND 351 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 135, actual value 136
TEST FAIL, 135 AND 136 ARE NOT EQUAL
Verify played card count increased by 1, expected value 115, actual value 114
TEST FAIL, 115 AND 114 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 22, actual count 22
TEST PASS, 22 AND 22 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 154, actual value 153
TEST FAIL, 154 AND 153 ARE NOT EQUAL
Verify played card count increased by 1, expected value 273, actual value 272
TEST FAIL, 273 AND 272 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 49, actual value 48
TEST FAIL, 49 AND 48 ARE NOT EQUAL
Verify played card count increased by 1, expected value 372, actual value 371
TEST FAIL, 372 AND 371 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 188, actual value 187
TEST FAIL, 188 AND 187 ARE NOT EQUAL
Verify played card count increased by 1, expected value 117, actual value 116
TEST FAIL, 117 AND 116 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 269, actual value 268
TEST FAIL, 269 AND 268 ARE NOT EQUAL
Verify played card count increased by 1, expected value 348, actual value 347
TEST FAIL, 348 AND 347 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 262, actual value 261
TEST FAIL, 262 AND 261 ARE NOT EQUAL
Verify played card count increased by 1, expected value 6, actual value 5
TEST FAIL, 6 AND 5 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 14, actual value 13
TEST FAIL, 14 AND 13 ARE NOT EQUAL
Verify played card count increased by 1, expected value 361, actual value 360
TEST FAIL, 361 AND 360 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 36, actual value 37
TEST FAIL, 36 AND 37 ARE NOT EQUAL
Verify played card count increased by 1, expected value 357, actual value 356
TEST FAIL, 357 AND 356 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 4
TEST FAIL, 7 AND 4 ARE NOT EQUAL
Verifying two new treasures have been added, expected count 8, actual count 8
TEST PASS, 8 AND 8 ARE EQUAL
TEST PASS, 0 AND 0 ARE EQUAL
Verify hand count increased by 1, expected value 7, actual value 6
TEST FAIL, 7 AND 6 ARE NOT EQUAL
Verify played card count increased by 1, expected value 258, actual value 257
TEST FAIL, 258 AND 257 ARE NOT EQUAL
Verify played card pile top card is adventurer, expected value 7, actual value 7
TEST PASS, 7 AND 7 ARE EQUAL
Verifying two new treasures have been added, expected count 2, actual count 0
TEST FAIL, 2 AND 0 ARE NOT EQUAL

**TESTING COMPLETE**

File 'dominion.c'
Lines executed:27.34% of 556
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     9939:    8:int compare(const void* a, const void* b) {
     9939:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     9939:   11:  if (*(int*)a < *(int*)b)
     2648:   12:    return -1;
     7291:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      203:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      203:   44:  SelectStream(1);
      203:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
      203:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      203:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     2233:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    22330:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    20300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      203:   73:  if (numPlayers == 2)
        -:   74:    {
       43:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      160:   77:  else if (numPlayers == 3)
        -:   78:    {
       64:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       96:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      203:   87:  if (numPlayers == 2)
        -:   88:    {
       43:   89:      state->supplyCount[estate] = 8;
       43:   90:      state->supplyCount[duchy] = 8;
       43:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      160:   95:      state->supplyCount[estate] = 12;
      160:   96:      state->supplyCount[duchy] = 12;
      160:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      203:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      203:  102:  state->supplyCount[silver] = 40;
      203:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     4263:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    33495:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    31465:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     2030:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      406:  115:		  if (numPlayers == 2){ 
       43:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      160:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     1827:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     2030:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    29435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      865:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      662:  140:      state->deckCount[i] = 0;
     2648:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     1986:  143:	  state->deck[i][j] = estate;
     1986:  144:	  state->deckCount[i]++;
        -:  145:	}
     5296:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     4634:  148:	  state->deck[i][j] = copper;
     4634:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      865:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      662:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      865:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      662:  166:      state->handCount[i] = 0;
      662:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
     5684:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     5481:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      203:  182:  state->outpostPlayed = 0;
      203:  183:  state->phase = 0;
      203:  184:  state->numActions = 1;
      203:  185:  state->numBuys = 1;
      203:  186:  state->playedCardCount = 0;
      203:  187:  state->whoseTurn = 0;
      203:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1218:  192:  for (it = 0; it < 5; it++){
     1015:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      203:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      203:  198:  return 0;
        -:  199:}
        -:  200:
      666:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      666:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      666:  209:  if (state->deckCount[player] < 1)
        3:  210:    return -1;
      663:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     7953:  214:  while (state->deckCount[player] > 0) {
     6627:  215:    card = floor(Random() * state->deckCount[player]);
     6627:  216:    newDeck[newDeckPos] = state->deck[player][card];
     6627:  217:    newDeckPos++;
    22393:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    15766:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     6627:  221:    state->deckCount[player]--;
        -:  222:  }
     7290:  223:  for (i = 0; i < newDeckPos; i++) {
     6627:  224:    state->deck[player][i] = newDeck[i];
     6627:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      663:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    28692:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    28692:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        9:  533:    for (i = 0; i < state->discardCount[player];i++){
        7:  534:      state->deck[player][i] = state->discard[player][i];
        7:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
        1:  560:      return -1;
        -:  561:
        1:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:    state->deckCount[player]--;
        1:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    28690:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    28690:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    28690:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    28690:  576:    state->deckCount[player]--;
    28690:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    28691:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/**
        -:  647: * Play Adventurer Card
        -:  648: * Given a player id and a game state, this function will act out the effect of that player
        -:  649: * using an adventurer card
        -:  650: */
      102:  651:int doAdventurerEffect(int currentPlayer, struct gameState *state) {
      102:  652:  int z = 0;
      102:  653:  int drawntreasure = 0;
        -:  654:  int temphand[MAX_HAND];
        -:  655:  int cardDrawn;
        -:  656:
    27471:  657:  while (drawntreasure < 2) {
    27267:  658:    drawCard(currentPlayer, state);
        -:  659:
        -:  660:    //if the deck is empty we need to shuffle discard and add to deck
    27267:  661:    if (state->deckCount[currentPlayer] < 1) {
        2:  662:      shuffle(currentPlayer, state);
        -:  663:    }
        -:  664:    //top card of hand is most recently drawn card.
    27267:  665:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
    27267:  666:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
      204:  667:      drawntreasure++;
        -:  668:    } else {
    27063:  669:      temphand[++z] = cardDrawn;
        -:  670:      // this should just remove the top card (the most recently drawn one).
    27063:  671:      state->handCount[currentPlayer]--;
        -:  672:    }
        -:  673:  }
        -:  674:
    27267:  675:  while (z - 1 >= 0) {
        -:  676:    // discard all cards in play that have been drawn
    27063:  677:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1];
    27063:  678:    z = z - 1;
        -:  679:  }
        -:  680:
      102:  681:  return 0;
        -:  682:}
        -:  683:
        -:  684:/**
        -:  685: * Play Smithy Card
        -:  686: * Given a players hand position, a player id and a game state, this function will
        -:  687: * act out the effect of that player using a smithy card
        -:  688: */
      101:  689:int doSmithyEffect(int handPos, int currentPlayer, struct gameState *state) {
        -:  690:  int i;
        -:  691:
        -:  692:  // +3 Cards
      505:  693:  for (i = 0; i <= 3; i++) {
        -:  694:
      404:  695:    drawCard(currentPlayer, state);
        -:  696:  } 
        -:  697:  
        -:  698:  //discard card from hand
      101:  699:  discardCard(handPos, currentPlayer, state, 0);
        -:  700:
      101:  701:  return 0;
        -:  702:}
        -:  703:
        -:  704:/**
        -:  705: * Play Council Room Card
        -:  706: * Given a players hand position, a player id and a game state, this function will
        -:  707: * act out the effect of that player using a council room card
        -:  708: */
        1:  709:int doCouncilRoomEffect(int handPos, int currentPlayer, struct gameState *state) {
        -:  710:  int i;
        -:  711:
        -:  712:  //+4 Cards
        5:  713:  for (i = 0; i < 4; i++) {
        4:  714:    drawCard(currentPlayer, state);
        -:  715:  }
        -:  716:
        -:  717:  //+1 Buy
        1:  718:  state->numBuys++;
        -:  719:
        -:  720:  //Each other player draws a card
        3:  721:  for (i = 0; i < state->numPlayers; i++) {
        2:  722:    drawCard(i, state);
        -:  723:  }
        -:  724:
        -:  725:  //put played card in played card pile
        1:  726:  discardCard(handPos, currentPlayer, state, 0);
        -:  727:
        1:  728:  return 0;
        -:  729:}
        -:  730:
        -:  731:/**
        -:  732: * Play Village Card
        -:  733: * Given a players hand position, a player id and a game state, this function will
        -:  734: * act out the effect of that player using a village card
        -:  735: */
    #####:  736:int doVillageEffect(int handPos, int currentPlayer, struct gameState *state) {
        -:  737:  //+1 Card
    #####:  738:  drawCard(currentPlayer, state);
        -:  739:
        -:  740:  //+2 Actions
    #####:  741:  state->numActions = state->numActions + 2;
        -:  742:
        -:  743:  //discard played card from hand
    #####:  744:  discardCard(currentPlayer, handPos, state, 0);
        -:  745:
    #####:  746:  return 0;
        -:  747:}
        -:  748:
        -:  749:/**
        -:  750: * Play Baron Card
        -:  751: * Given an integer choice option, a players hand position, a player id and a game
        -:  752: * state, this function will act out the effect of that player using a baron card
        -:  753: */
    #####:  754:int doBaronEffect(int choice1, int currentPlayer, struct gameState *state) {
        -:  755:  int p;
        -:  756:  int cardNotDiscarded;
        -:  757:
        -:  758:  // Increase buys by 1!
    #####:  759:  state->numBuys++;
        -:  760:
        -:  761:  // Boolean true or going to discard an estate
    #####:  762:  if (choice1 > 0) {
        -:  763:    // Iterator for hand!
    #####:  764:    p = 0;
        -:  765:    // Flag for discard set!
    #####:  766:    cardNotDiscarded = 1;
        -:  767:
    #####:  768:    while (cardNotDiscarded) {
        -:  769:      // Found an estate card!
    #####:  770:      if (state->hand[currentPlayer][p] == estate) {
        -:  771:        // Add 4 coins to the amount of coins
    #####:  772:        state->coins += 4;
    #####:  773:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  774:        state->discardCount[currentPlayer]++;
        -:  775:
    #####:  776:        for (;p < state->handCount[currentPlayer]; p++) {
    #####:  777:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  778:        }
        -:  779:
    #####:  780:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  781:        state->handCount[currentPlayer]--;
        -:  782:
        -:  783:        // Exit the loop
    #####:  784:        cardNotDiscarded = 0;
    #####:  785:      } else if (p > state->handCount[currentPlayer]) {
        -:  786:
        -:  787:        if(DEBUG) {
        -:  788:          printf("No estate cards in your hand, invalid choice\n");
        -:  789:          printf("Must gain an estate if there are any\n");
        -:  790:        }
        -:  791:
    #####:  792:        if (supplyCount(estate, state) > 0) {
    #####:  793:          gainCard(estate, state, 0, currentPlayer);
        -:  794:
        -:  795:          // Decrement estates
    #####:  796:          state->supplyCount[estate]--;
        -:  797:
    #####:  798:          if (supplyCount(estate, state) == 0) {
    #####:  799:            isGameOver(state);
        -:  800:          }
        -:  801:        }
        -:  802:
        -:  803:        // Exit the loop
    #####:  804:        cardNotDiscarded = 0;
        -:  805:      } else {
        -:  806:        // Next card
    #####:  807:        p++;
        -:  808:      }
        -:  809:    }
        -:  810:  } else {
    #####:  811:    if (supplyCount(estate, state) > 0) {
        -:  812:      // Gain an estate
    #####:  813:      gainCard(estate, state, 0, currentPlayer);
        -:  814:      // Decrement estates
    #####:  815:      state->supplyCount[estate]--;
    #####:  816:      if (supplyCount(estate, state) == 0) {
    #####:  817:        isGameOver(state);
        -:  818:      }
        -:  819:    }
        -:  820:  }
        -:  821:
    #####:  822:  return 0;
        -:  823:}
        -:  824:
    #####:  825:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  826:{
        -:  827:  int i;
        -:  828:  int j;
        -:  829:  int k;
        -:  830:  int x;
        -:  831:  int index;
    #####:  832:  int currentPlayer = whoseTurn(state);
    #####:  833:  int nextPlayer = currentPlayer + 1;
        -:  834:
    #####:  835:  int tributeRevealedCards[2] = {-1, -1};
        -:  836:  int temphand[MAX_HAND];// moved above the if statement
        -:  837:
    #####:  838:  if (nextPlayer > (state->numPlayers - 1)) {
    #####:  839:    nextPlayer = 0;
        -:  840:  }
        -:  841:
        -:  842:  //uses switch to select card and perform actions
    #####:  843:  switch (card) {
        -:  844:    case adventurer:
    #####:  845:      return doAdventurerEffect(currentPlayer, state);
        -:  846:
        -:  847:    case council_room:
    #####:  848:      return doCouncilRoomEffect(handPos, currentPlayer, state);
        -:  849:
        -:  850:    case feast:
        -:  851:      //gain card with cost up to 5
        -:  852:      //Backup hand
    #####:  853:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  854:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  855:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  856:      }
        -:  857:      //Backup hand
        -:  858:
        -:  859:      //Update Coins for Buy
    #####:  860:      updateCoins(currentPlayer, state, 5);
    #####:  861:      x = 1;//Condition to loop on
    #####:  862:      while( x == 1) {//Buy one card
    #####:  863:	if (supplyCount(choice1, state) <= 0){
        -:  864:	  if (DEBUG)
        -:  865:	    printf("None of that card left, sorry!\n");
        -:  866:
        -:  867:	  if (DEBUG){
        -:  868:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  869:	  }
        -:  870:	}
    #####:  871:	else if (state->coins < getCost(choice1)){
    #####:  872:	  printf("That card is too expensive!\n");
        -:  873:
        -:  874:	  if (DEBUG){
        -:  875:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  876:	  }
        -:  877:	}
        -:  878:	else{
        -:  879:
        -:  880:	  if (DEBUG){
        -:  881:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  882:	  }
        -:  883:
    #####:  884:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  885:	  x = 0;//No more buying cards
        -:  886:
        -:  887:	  if (DEBUG){
        -:  888:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  889:	  }
        -:  890:
        -:  891:	}
        -:  892:      }     
        -:  893:
        -:  894:      //Reset Hand
    #####:  895:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  896:	state->hand[currentPlayer][i] = temphand[i];
    #####:  897:	temphand[i] = -1;
        -:  898:      }
        -:  899:      //Reset Hand
        -:  900:
    #####:  901:      return 0;
        -:  902:
        -:  903:    case gardens:
    #####:  904:      return -1;
        -:  905:
        -:  906:    case mine:
    #####:  907:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  908:
    #####:  909:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  910:	{
    #####:  911:	  return -1;
        -:  912:	}
        -:  913:
    #####:  914:      if (choice2 > treasure_map || choice2 < curse)
        -:  915:	{
    #####:  916:	  return -1;
        -:  917:	}
        -:  918:
    #####:  919:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  920:	{
    #####:  921:	  return -1;
        -:  922:	}
        -:  923:
    #####:  924:      gainCard(choice2, state, 2, currentPlayer);
        -:  925:
        -:  926:      //discard card from hand
    #####:  927:      discardCard(handPos, currentPlayer, state, 0);
        -:  928:
        -:  929:      //discard trashed card
    #####:  930:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  931:	{
    #####:  932:	  if (state->hand[currentPlayer][i] == j)
        -:  933:	    {
    #####:  934:	      discardCard(i, currentPlayer, state, 0);			
    #####:  935:	      break;
        -:  936:	    }
        -:  937:	}
        -:  938:
    #####:  939:      return 0;
        -:  940:
        -:  941:    case remodel:
    #####:  942:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  943:
    #####:  944:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  945:	{
    #####:  946:	  return -1;
        -:  947:	}
        -:  948:
    #####:  949:      gainCard(choice2, state, 0, currentPlayer);
        -:  950:
        -:  951:      //discard card from hand
    #####:  952:      discardCard(handPos, currentPlayer, state, 0);
        -:  953:
        -:  954:      //discard trashed card
    #####:  955:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  956:	{
    #####:  957:	  if (state->hand[currentPlayer][i] == j)
        -:  958:	    {
    #####:  959:	      discardCard(i, currentPlayer, state, 0);			
    #####:  960:	      break;
        -:  961:	    }
        -:  962:	}
        -:  963:
        -:  964:
    #####:  965:      return 0;
        -:  966:
        -:  967:    case smithy:
    #####:  968:      return doSmithyEffect(handPos, currentPlayer, state);
        -:  969:
        -:  970:    case village:
    #####:  971:      return doVillageEffect(handPos, currentPlayer, state);
        -:  972:
        -:  973:    case baron:
    #####:  974:      return doBaronEffect(choice1, currentPlayer, state);
        -:  975:
        -:  976:    case great_hall:
        -:  977:      //+1 Card
    #####:  978:      drawCard(currentPlayer, state);
        -:  979:
        -:  980:      //+1 Actions
    #####:  981:      state->numActions++;
        -:  982:
        -:  983:      //discard card from hand
    #####:  984:      discardCard(handPos, currentPlayer, state, 0);
    #####:  985:      return 0;
        -:  986:
        -:  987:    case minion:
        -:  988:      //+1 action
    #####:  989:      state->numActions++;
        -:  990:
        -:  991:      //discard card from hand
    #####:  992:      discardCard(handPos, currentPlayer, state, 0);
        -:  993:
    #####:  994:      if (choice1)		//+2 coins
        -:  995:	{
    #####:  996:	  state->coins = state->coins + 2;
        -:  997:	}
        -:  998:
    #####:  999:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1000:	{
        -: 1001:	  //discard hand
    #####: 1002:	  while(numHandCards(state) > 0)
        -: 1003:	    {
    #####: 1004:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1005:	    }
        -: 1006:
        -: 1007:	  //draw 4
    #####: 1008:	  for (i = 0; i < 4; i++)
        -: 1009:	    {
    #####: 1010:	      drawCard(currentPlayer, state);
        -: 1011:	    }
        -: 1012:
        -: 1013:	  //other players discard hand and redraw if hand size > 4
    #####: 1014:	  for (i = 0; i < state->numPlayers; i++)
        -: 1015:	    {
    #####: 1016:	      if (i != currentPlayer)
        -: 1017:		{
    #####: 1018:		  if ( state->handCount[i] > 4 )
        -: 1019:		    {
        -: 1020:		      //discard hand
    #####: 1021:		      while( state->handCount[i] > 0 )
        -: 1022:			{
    #####: 1023:			  discardCard(handPos, i, state, 0);
        -: 1024:			}
        -: 1025:
        -: 1026:		      //draw 4
    #####: 1027:		      for (j = 0; j < 4; j++)
        -: 1028:			{
    #####: 1029:			  drawCard(i, state);
        -: 1030:			}
        -: 1031:		    }
        -: 1032:		}
        -: 1033:	    }
        -: 1034:
        -: 1035:	}
    #####: 1036:      return 0;
        -: 1037:
        -: 1038:    case steward:
    #####: 1039:      if (choice1 == 1)
        -: 1040:	{
        -: 1041:	  //+2 cards
    #####: 1042:	  drawCard(currentPlayer, state);
    #####: 1043:	  drawCard(currentPlayer, state);
        -: 1044:	}
    #####: 1045:      else if (choice1 == 2)
        -: 1046:	{
        -: 1047:	  //+2 coins
    #####: 1048:	  state->coins = state->coins + 2;
        -: 1049:	}
        -: 1050:      else
        -: 1051:	{
        -: 1052:	  //trash 2 cards in hand
    #####: 1053:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1054:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1055:	}
        -: 1056:
        -: 1057:      //discard card from hand
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1059:      return 0;
        -: 1060:
        -: 1061:    case tribute:
    #####: 1062:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1063:	if (state->deckCount[nextPlayer] > 0){
    #####: 1064:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1065:	  state->deckCount[nextPlayer]--;
        -: 1066:	}
    #####: 1067:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1068:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1069:	  state->discardCount[nextPlayer]--;
        -: 1070:	}
        -: 1071:	else{
        -: 1072:	  //No Card to Reveal
        -: 1073:	  if (DEBUG){
        -: 1074:	    printf("No cards to reveal\n");
        -: 1075:	  }
        -: 1076:	}
        -: 1077:      }
        -: 1078:
        -: 1079:      else{
    #####: 1080:	if (state->deckCount[nextPlayer] == 0){
    #####: 1081:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1082:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1083:	    state->deckCount[nextPlayer]++;
    #####: 1084:	    state->discard[nextPlayer][i] = -1;
    #####: 1085:	    state->discardCount[nextPlayer]--;
        -: 1086:	  }
        -: 1087:
    #####: 1088:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1089:	} 
    #####: 1090:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1091:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1092:	state->deckCount[nextPlayer]--;
    #####: 1093:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1094:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1095:	state->deckCount[nextPlayer]--;
        -: 1096:      }    
        -: 1097:
    #####: 1098:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1099:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1100:	state->playedCardCount++;
    #####: 1101:	tributeRevealedCards[1] = -1;
        -: 1102:      }
        -: 1103:
    #####: 1104:      for (i = 0; i <= 2; i ++){
    #####: 1105:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1106:	  state->coins += 2;
        -: 1107:	}
        -: 1108:
    #####: 1109:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1110:	  drawCard(currentPlayer, state);
    #####: 1111:	  drawCard(currentPlayer, state);
        -: 1112:	}
        -: 1113:	else{//Action Card
    #####: 1114:	  state->numActions = state->numActions + 2;
        -: 1115:	}
        -: 1116:      }
        -: 1117:
    #####: 1118:      return 0;
        -: 1119:
        -: 1120:    case ambassador:
    #####: 1121:      j = 0;		//used to check if player has enough cards to discard
        -: 1122:
    #####: 1123:      if (choice2 > 2 || choice2 < 0)
        -: 1124:	{
    #####: 1125:	  return -1;				
        -: 1126:	}
        -: 1127:
    #####: 1128:      if (choice1 == handPos)
        -: 1129:	{
    #####: 1130:	  return -1;
        -: 1131:	}
        -: 1132:
    #####: 1133:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1134:	{
    #####: 1135:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1136:	    {
    #####: 1137:	      j++;
        -: 1138:	    }
        -: 1139:	}
    #####: 1140:      if (j < choice2)
        -: 1141:	{
    #####: 1142:	  return -1;				
        -: 1143:	}
        -: 1144:
        -: 1145:      if (DEBUG) 
        -: 1146:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1147:
        -: 1148:      //increase supply count for choosen card by amount being discarded
    #####: 1149:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1150:
        -: 1151:      //each other player gains a copy of revealed card
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
        -: 1155:	    {
    #####: 1156:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1157:	    }
        -: 1158:	}
        -: 1159:
        -: 1160:      //discard played card from hand
    #####: 1161:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1162:
        -: 1163:      //trash copies of cards returned to supply
    #####: 1164:      for (j = 0; j < choice2; j++)
        -: 1165:	{
    #####: 1166:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1167:	    {
    #####: 1168:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1169:		{
    #####: 1170:		  discardCard(i, currentPlayer, state, 1);
    #####: 1171:		  break;
        -: 1172:		}
        -: 1173:	    }
        -: 1174:	}			
        -: 1175:
    #####: 1176:      return 0;
        -: 1177:
        -: 1178:    case cutpurse:
        -: 1179:
    #####: 1180:      updateCoins(currentPlayer, state, 2);
    #####: 1181:      for (i = 0; i < state->numPlayers; i++)
        -: 1182:	{
    #####: 1183:	  if (i != currentPlayer)
        -: 1184:	    {
    #####: 1185:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1186:		{
    #####: 1187:		  if (state->hand[i][j] == copper)
        -: 1188:		    {
    #####: 1189:		      discardCard(j, i, state, 0);
    #####: 1190:		      break;
        -: 1191:		    }
    #####: 1192:		  if (j == state->handCount[i])
        -: 1193:		    {
    #####: 1194:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1195:			{
        -: 1196:			  if (DEBUG)
        -: 1197:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1198:			}	
    #####: 1199:		      break;
        -: 1200:		    }		
        -: 1201:		}
        -: 1202:
        -: 1203:	    }
        -: 1204:
        -: 1205:	}				
        -: 1206:
        -: 1207:      //discard played card from hand
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1209:
    #####: 1210:      return 0;
        -: 1211:
        -: 1212:
        -: 1213:    case embargo: 
        -: 1214:      //+2 Coins
    #####: 1215:      state->coins = state->coins + 2;
        -: 1216:
        -: 1217:      //see if selected pile is in play
    #####: 1218:      if ( state->supplyCount[choice1] == -1 )
        -: 1219:	{
    #####: 1220:	  return -1;
        -: 1221:	}
        -: 1222:
        -: 1223:      //add embargo token to selected supply pile
    #####: 1224:      state->embargoTokens[choice1]++;
        -: 1225:
        -: 1226:      //trash card
    #####: 1227:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1228:      return 0;
        -: 1229:
        -: 1230:    case outpost:
        -: 1231:      //set outpost flag
    #####: 1232:      state->outpostPlayed++;
        -: 1233:
        -: 1234:      //discard card
    #####: 1235:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1236:      return 0;
        -: 1237:
        -: 1238:    case salvager:
        -: 1239:      //+1 buy
    #####: 1240:      state->numBuys++;
        -: 1241:
    #####: 1242:      if (choice1)
        -: 1243:	{
        -: 1244:	  //gain coins equal to trashed card
    #####: 1245:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1246:	  //trash card
    #####: 1247:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1248:	}
        -: 1249:
        -: 1250:      //discard card
    #####: 1251:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1252:      return 0;
        -: 1253:
        -: 1254:    case sea_hag:
    #####: 1255:      for (i = 0; i < state->numPlayers; i++){
    #####: 1256:	if (i != currentPlayer){
    #####: 1257:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1258:	  state->discardCount[i]++;
    #####: 1259:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1260:	}
        -: 1261:      }
    #####: 1262:      return 0;
        -: 1263:
        -: 1264:    case treasure_map:
        -: 1265:      //search hand for another treasure_map
    #####: 1266:      index = -1;
    #####: 1267:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1268:	{
    #####: 1269:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1270:	    {
    #####: 1271:	      index = i;
    #####: 1272:	      break;
        -: 1273:	    }
        -: 1274:	}
    #####: 1275:      if (index > -1)
        -: 1276:	{
        -: 1277:	  //trash both treasure cards
    #####: 1278:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1279:	  discardCard(index, currentPlayer, state, 1);
        -: 1280:
        -: 1281:	  //gain 4 Gold cards
    #####: 1282:	  for (i = 0; i < 4; i++)
        -: 1283:	    {
    #####: 1284:	      gainCard(gold, state, 1, currentPlayer);
        -: 1285:	    }
        -: 1286:
        -: 1287:	  //return success
    #####: 1288:	  return 1;
        -: 1289:	}
        -: 1290:
        -: 1291:      //no second treasure_map found in hand
    #####: 1292:      return -1;
        -: 1293:    }
        -: 1294:
    #####: 1295:  return -1;
        -: 1296:}
        -: 1297:
      304: 1298:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1299:{
        -: 1300:
        -: 1301:  //if card is not trashed, added to Played pile 
      304: 1302:  if (trashFlag < 1)
        -: 1303:    {
        -: 1304:      //add card to played pile
      304: 1305:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      304: 1306:      state->playedCardCount++;
        -: 1307:    }
        -: 1308:
        -: 1309:  //set played card to -1
      304: 1310:  state->hand[currentPlayer][handPos] = -1;
        -: 1311:
        -: 1312:  //remove card from player's hand
      304: 1313:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1314:    {
        -: 1315:      //reduce number of cards in hand
        2: 1316:      state->handCount[currentPlayer]--;
        -: 1317:    }
      302: 1318:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1319:    {
        -: 1320:      //reduce number of cards in hand
    #####: 1321:      state->handCount[currentPlayer]--;
        -: 1322:    }
        -: 1323:  else 	
        -: 1324:    {
        -: 1325:      //replace discarded card with last card in hand
      302: 1326:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1327:      //set last card to -1
      302: 1328:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1329:      //reduce number of cards in hand
      302: 1330:      state->handCount[currentPlayer]--;
        -: 1331:    }
        -: 1332:
      304: 1333:  return 0;
        -: 1334:}
        -: 1335:
    #####: 1336:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1337:{
        -: 1338:  //Note: supplyPos is enum of choosen card
        -: 1339:
        -: 1340:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1341:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1342:    {
    #####: 1343:      return -1;
        -: 1344:    }
        -: 1345:
        -: 1346:  //added card for [whoseTurn] current player:
        -: 1347:  // toFlag = 0 : add to discard
        -: 1348:  // toFlag = 1 : add to deck
        -: 1349:  // toFlag = 2 : add to hand
        -: 1350:
    #####: 1351:  if (toFlag == 1)
        -: 1352:    {
    #####: 1353:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1354:      state->deckCount[player]++;
        -: 1355:    }
    #####: 1356:  else if (toFlag == 2)
        -: 1357:    {
    #####: 1358:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1359:      state->handCount[player]++;
        -: 1360:    }
        -: 1361:  else
        -: 1362:    {
    #####: 1363:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1364:      state->discardCount[player]++;
        -: 1365:    }
        -: 1366:
        -: 1367:  //decrease number in supply pile
    #####: 1368:  state->supplyCount[supplyPos]--;
        -: 1369:
    #####: 1370:  return 0;
        -: 1371:}
        -: 1372:
      203: 1373:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1374:{
        -: 1375:  int i;
        -: 1376:
        -: 1377:  //reset coin count
      203: 1378:  state->coins = 0;
        -: 1379:
        -: 1380:  //add coins for each Treasure card in player's hand
     1218: 1381:  for (i = 0; i < state->handCount[player]; i++)
        -: 1382:    {
     1015: 1383:      if (state->hand[player][i] == copper)
        -: 1384:	{
      819: 1385:	  state->coins += 1;
        -: 1386:	}
      196: 1387:      else if (state->hand[player][i] == silver)
        -: 1388:	{
    #####: 1389:	  state->coins += 2;
        -: 1390:	}
      196: 1391:      else if (state->hand[player][i] == gold)
        -: 1392:	{
    #####: 1393:	  state->coins += 3;
        -: 1394:	}	
        -: 1395:    }	
        -: 1396:
        -: 1397:  //add bonus
      203: 1398:  state->coins += bonus;
        -: 1399:
      203: 1400:  return 0;
        -: 1401:}
        -: 1402:
        -: 1403:
        -: 1404://end of dominion.c
        -: 1405:
