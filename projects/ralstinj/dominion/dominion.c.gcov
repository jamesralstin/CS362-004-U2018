        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:14
        -:    0:Programs:13
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    21816:    8:int compare(const void* a, const void* b) {
    21816:    9:  if (*(int*)a > *(int*)b)
     3278:   10:    return 1;
    18538:   11:  if (*(int*)a < *(int*)b)
     7113:   12:    return -1;
    11425:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      310:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      310:   44:  SelectStream(1);
      310:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      310:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      310:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     3410:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    34100:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    31000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      310:   73:  if (numPlayers == 2)
        -:   74:    {
       62:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      248:   77:  else if (numPlayers == 3)
        -:   78:    {
       96:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      152:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      310:   87:  if (numPlayers == 2)
        -:   88:    {
       62:   89:      state->supplyCount[estate] = 8;
       62:   90:      state->supplyCount[duchy] = 8;
       62:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      248:   95:      state->supplyCount[estate] = 12;
      248:   96:      state->supplyCount[duchy] = 12;
      248:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      310:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      310:  102:  state->supplyCount[silver] = 40;
      310:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     6510:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    51150:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    48050:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     3100:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      620:  115:		  if (numPlayers == 2){ 
       62:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      248:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     2790:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     3100:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    44950:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1330:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1020:  140:      state->deckCount[i] = 0;
     4080:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     3060:  143:	  state->deck[i][j] = estate;
     3060:  144:	  state->deckCount[i]++;
        -:  145:	}
     8160:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     7140:  148:	  state->deck[i][j] = copper;
     7140:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1330:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1020:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1330:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1020:  166:      state->handCount[i] = 0;
     1020:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     8680:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     8370:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      310:  182:  state->outpostPlayed = 0;
      310:  183:  state->phase = 0;
      310:  184:  state->numActions = 1;
      310:  185:  state->numBuys = 1;
      310:  186:  state->playedCardCount = 0;
      310:  187:  state->whoseTurn = 0;
      310:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1860:  192:  for (it = 0; it < 5; it++){
     1550:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      310:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      310:  198:  return 0;
        -:  199:}
        -:  200:
     1037:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1037:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1037:  209:  if (state->deckCount[player] < 1)
        2:  210:    return -1;
     1035:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    13269:  214:  while (state->deckCount[player] > 0) {
    11199:  215:    card = floor(Random() * state->deckCount[player]);
    11199:  216:    newDeck[newDeckPos] = state->deck[player][card];
    11199:  217:    newDeckPos++;
   117049:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   105850:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    11199:  221:    state->deckCount[player]--;
        -:  222:  }
    12234:  223:  for (i = 0; i < newDeckPos; i++) {
    11199:  224:    state->deck[player][i] = newDeck[i];
    11199:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1035:  228:  return 0;
        -:  229:}
        -:  230:
       48:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       48:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       48:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       48:  243:  if ( state->numActions < 1 )
        -:  244:    {
       40:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        8:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
        8:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        8:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        8:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        8:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        8:  269:  return 0;
        -:  270:}
        -:  271:
       32:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       32:  280:  who = state->whoseTurn;
        -:  281:
       32:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       32:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       32:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       32:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       32:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       32:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       32:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       32:  308:  return 0;
        -:  309:}
        -:  310:
      254:  311:int numHandCards(struct gameState *state) {
      254:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
      479:  315:int handCard(int handPos, struct gameState *state) {
      479:  316:  int currentPlayer = whoseTurn(state);
      479:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       69:  320:int supplyCount(int card, struct gameState *state) {
       69:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
       12:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       12:  326:  int count = 0;
        -:  327:
      108:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
       96:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
       46:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
       34:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
       14:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
        2:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
       12:  343:  return count;
        -:  344:}
        -:  345:
      805:  346:int whoseTurn(struct gameState *state) {
      805:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
       32:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       32:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      206:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      174:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      174:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
       32:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       32:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       16:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
       16:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       32:  370:  state->outpostPlayed = 0;
       32:  371:  state->phase = 0;
       32:  372:  state->numActions = 1;
       32:  373:  state->coins = 0;
       32:  374:  state->numBuys = 1;
       32:  375:  state->playedCardCount = 0;
       32:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      192:  380:  for (k = 0; k < 5; k++){
      160:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
       32:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       32:  387:  return 0;
        -:  388:}
        -:  389:
       33:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       33:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       32:  401:  j = 0;
      832:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      800:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
       32:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
       32:  414:  return 0;
        -:  415:}
        -:  416:
        2:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        2:  420:  int score = 0;
        -:  421:  //score from hand
        7:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
        5:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
        5:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
        5:  427:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       32:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
       30:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
       30:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
       30:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
       30:  438:      if (state->discard[player][i] == province) { score = score + 6; };
       30:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       30:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       32:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
       30:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
       30:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
       30:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
       30:  449:      if (state->deck[player][i] == province) { score = score + 6; };
       30:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       30:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        2:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    35699:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    35699:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1015:  533:    for (i = 0; i < state->discardCount[player];i++){
      999:  534:      state->deck[player][i] = state->discard[player][i];
      999:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       16:  538:    state->deckCount[player] = state->discardCount[player];
       16:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       16:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       16:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       16:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       16:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       16:  559:    if (deckCounter == 0)
        1:  560:      return -1;
        -:  561:
       15:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       15:  563:    state->deckCount[player]--;
       15:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    35683:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    35683:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    35683:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    35683:  576:    state->deckCount[player]--;
    35683:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    35698:  580:  return 0;
        -:  581:}
        -:  582:
       93:  583:int getCost(int cardNumber)
        -:  584:{
       93:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
       17:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
       27:  598:      return 3;
        -:  599:    case gold:
       15:  600:      return 6;
        -:  601:    case adventurer:
        5:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        5:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        2:  643:  return -1;
        -:  644:}
        -:  645:
        8:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        8:  653:  int currentPlayer = whoseTurn(state);
        8:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        8:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        8:  658:  int cardDrawn = 0;
        -:  659:  int result;
        8:  660:  int z = 0;// this is the counter for the temp hand
        8:  661:  if (nextPlayer > (state->numPlayers - 1)){
        6:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	//
        -:  666:  //uses switch to select card and perform actions
        8:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
        -:  670:	  
        6:  671:		result = playAdventurer(z, state, currentPlayer, cardDrawn, temphand);
        -:  672:	
        6:  673:		return result;
        -:  674:	
        -:  675:    case council_room:
        -:  676:      //+4 Cards
    #####:  677:      for (i = 0; i < 4; i++)
        -:  678:	{
    #####:  679:	  drawCard(currentPlayer, state);
        -:  680:	}
        -:  681:			
        -:  682:      //+1 Buy
    #####:  683:      state->numBuys++;
        -:  684:			
        -:  685:      //Each other player draws a card
    #####:  686:      for (i = 0; i < state->numPlayers; i++)
        -:  687:	{
    #####:  688:	  if ( i != currentPlayer )
        -:  689:	    {
    #####:  690:	      drawCard(i, state);
        -:  691:	    }
        -:  692:	}
        -:  693:			
        -:  694:      //put played card in played card pile
    #####:  695:      discardCard(handPos, currentPlayer, state, 0);
        -:  696:			
    #####:  697:      return 0;
        -:  698:			
        -:  699:    case feast:
        -:  700:      //gain card with cost up to 5
        -:  701:      //Backup hand
    #####:  702:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  703:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  704:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  705:      }
        -:  706:      //Backup hand
        -:  707:
        -:  708:      //Update Coins for Buy
    #####:  709:      updateCoins(currentPlayer, state, 5);
    #####:  710:      x = 1;//Condition to loop on
    #####:  711:      while( x == 1) {//Buy one card
    #####:  712:	if (supplyCount(choice1, state) <= 0){
        -:  713:	  if (DEBUG)
        -:  714:	    printf("None of that card left, sorry!\n");
        -:  715:
        -:  716:	  if (DEBUG){
        -:  717:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  718:	  }
        -:  719:	}
    #####:  720:	else if (state->coins < getCost(choice1)){
    #####:  721:	  printf("That card is too expensive!\n");
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  725:	  }
        -:  726:	}
        -:  727:	else{
        -:  728:
        -:  729:	  if (DEBUG){
        -:  730:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  731:	  }
        -:  732:
    #####:  733:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  734:	  x = 0;//No more buying cards
        -:  735:
        -:  736:	  if (DEBUG){
        -:  737:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	  }
        -:  739:
        -:  740:	}
        -:  741:      }     
        -:  742:
        -:  743:      //Reset Hand
    #####:  744:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  745:	state->hand[currentPlayer][i] = temphand[i];
    #####:  746:	temphand[i] = -1;
        -:  747:      }
        -:  748:      //Reset Hand
        -:  749:      			
    #####:  750:      return 0;
        -:  751:			
        -:  752:    case gardens:
    #####:  753:      return -1;
        -:  754:			
        -:  755:    case mine:
    #####:  756:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  757:
    #####:  758:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  759:	{
    #####:  760:	  return -1;
        -:  761:	}
        -:  762:		
    #####:  763:      if (choice2 > treasure_map || choice2 < curse)
        -:  764:	{
    #####:  765:	  return -1;
        -:  766:	}
        -:  767:
    #####:  768:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  769:	{
    #####:  770:	  return -1;
        -:  771:	}
        -:  772:
    #####:  773:      gainCard(choice2, state, 2, currentPlayer);
        -:  774:
        -:  775:      //discard card from hand
    #####:  776:      discardCard(handPos, currentPlayer, state, 0);
        -:  777:
        -:  778:      //discard trashed card
    #####:  779:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  780:	{
    #####:  781:	  if (state->hand[currentPlayer][i] == j)
        -:  782:	    {
    #####:  783:	      discardCard(i, currentPlayer, state, 0);			
    #####:  784:	      break;
        -:  785:	    }
        -:  786:	}
        -:  787:			
    #####:  788:      return 0;
        -:  789:			
        -:  790:    case remodel:
    #####:  791:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  792:
    #####:  793:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  794:	{
    #####:  795:	  return -1;
        -:  796:	}
        -:  797:
    #####:  798:      gainCard(choice2, state, 0, currentPlayer);
        -:  799:
        -:  800:      //discard card from hand
    #####:  801:      discardCard(handPos, currentPlayer, state, 0);
        -:  802:
        -:  803:      //discard trashed card
    #####:  804:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  805:	{
    #####:  806:	  if (state->hand[currentPlayer][i] == j)
        -:  807:	    {
    #####:  808:	      discardCard(i, currentPlayer, state, 0);			
    #####:  809:	      break;
        -:  810:	    }
        -:  811:	}
        -:  812:
        -:  813:
    #####:  814:      return 0;
        -:  815:		
        -:  816:    case smithy:
        -:  817:
        2:  818:		result = playSmithy(currentPlayer, state, handPos);
        -:  819:	
        2:  820:		return result;
        -:  821:		
        -:  822:    case village:
        -:  823:      //+1 Card
    #####:  824:      drawCard(currentPlayer, state);
        -:  825:			
        -:  826:      //+2 Actions
    #####:  827:      state->numActions = state->numActions + 2;
        -:  828:			
        -:  829:      //discard played card from hand
    #####:  830:      discardCard(handPos, currentPlayer, state, 0);
    #####:  831:      return 0;
        -:  832:		
        -:  833:    case baron:
    #####:  834:      state->numBuys++;//Increase buys by 1!
    #####:  835:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  836:	int p = 0;//Iterator for hand!
    #####:  837:	int card_not_discarded = 1;//Flag for discard set!
    #####:  838:	while(card_not_discarded){
    #####:  839:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  840:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  841:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  842:	    state->discardCount[currentPlayer]++;
    #####:  843:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  844:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  845:	    }
    #####:  846:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  847:	    state->handCount[currentPlayer]--;
    #####:  848:	    card_not_discarded = 0;//Exit the loop
        -:  849:	  }
    #####:  850:	  else if (p > state->handCount[currentPlayer]){
        -:  851:	    if(DEBUG) {
        -:  852:	      printf("No estate cards in your hand, invalid choice\n");
        -:  853:	      printf("Must gain an estate if there are any\n");
        -:  854:	    }
    #####:  855:	    if (supplyCount(estate, state) > 0){
    #####:  856:	      gainCard(estate, state, 0, currentPlayer);
    #####:  857:	      state->supplyCount[estate]--;//Decrement estates
    #####:  858:	      if (supplyCount(estate, state) == 0){
    #####:  859:		isGameOver(state);
        -:  860:	      }
        -:  861:	    }
    #####:  862:	    card_not_discarded = 0;//Exit the loop
        -:  863:	  }
        -:  864:			    
        -:  865:	  else{
    #####:  866:	    p++;//Next card
        -:  867:	  }
        -:  868:	}
        -:  869:      }
        -:  870:			    
        -:  871:      else{
    #####:  872:	if (supplyCount(estate, state) > 0){
    #####:  873:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  874:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  875:	  if (supplyCount(estate, state) == 0){
    #####:  876:	    isGameOver(state);
        -:  877:	  }
        -:  878:	}
        -:  879:      }
        -:  880:	    
        -:  881:      
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case great_hall:
        -:  885:      //+1 Card
    #####:  886:      drawCard(currentPlayer, state);
        -:  887:			
        -:  888:      //+1 Actions
    #####:  889:      state->numActions++;
        -:  890:			
        -:  891:      //discard card from hand
    #####:  892:      discardCard(handPos, currentPlayer, state, 0);
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case minion:
        -:  896:
    #####:  897:		result = playMinion(state, currentPlayer, handPos, choice1, choice2);
        -:  898:	
    #####:  899:      return result;
        -:  900:		
        -:  901:    case steward:
        -:  902:
    #####:  903:		result = playSteward(state, currentPlayer, handPos, choice1, choice2, choice3);
        -:  904:	
    #####:  905:      return result;
        -:  906:		
        -:  907:    case tribute:
    #####:  908:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  909:	if (state->deckCount[nextPlayer] > 0){
    #####:  910:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  911:	  state->deckCount[nextPlayer]--;
        -:  912:	}
    #####:  913:	else if (state->discardCount[nextPlayer] > 0){
    #####:  914:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  915:	  state->discardCount[nextPlayer]--;
        -:  916:	}
        -:  917:	else{
        -:  918:	  //No Card to Reveal
        -:  919:	  if (DEBUG){
        -:  920:	    printf("No cards to reveal\n");
        -:  921:	  }
        -:  922:	}
        -:  923:      }
        -:  924:	    
        -:  925:      else{
    #####:  926:	if (state->deckCount[nextPlayer] == 0){
    #####:  927:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  928:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  929:	    state->deckCount[nextPlayer]++;
    #####:  930:	    state->discard[nextPlayer][i] = -1;
    #####:  931:	    state->discardCount[nextPlayer]--;
        -:  932:	  }
        -:  933:			    
    #####:  934:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  935:	} 
    #####:  936:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  937:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  938:	state->deckCount[nextPlayer]--;
    #####:  939:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  940:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  941:	state->deckCount[nextPlayer]--;
        -:  942:      }    
        -:  943:		       
    #####:  944:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  945:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  946:	state->playedCardCount++;
    #####:  947:	tributeRevealedCards[1] = -1;
        -:  948:      }
        -:  949:
    #####:  950:      for (i = 0; i <= 2; i ++){
    #####:  951:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  952:	  state->coins += 2;
        -:  953:	}
        -:  954:		    
    #####:  955:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	  drawCard(currentPlayer, state);
        -:  958:	}
        -:  959:	else{//Action Card
    #####:  960:	  state->numActions = state->numActions + 2;
        -:  961:	}
        -:  962:      }
        -:  963:	    
    #####:  964:      return 0;
        -:  965:		
        -:  966:    case ambassador:
    #####:  967:      j = 0;		//used to check if player has enough cards to discard
        -:  968:
    #####:  969:      if (choice2 > 2 || choice2 < 0)
        -:  970:	{
    #####:  971:	  return -1;				
        -:  972:	}
        -:  973:
    #####:  974:      if (choice1 == handPos)
        -:  975:	{
    #####:  976:	  return -1;
        -:  977:	}
        -:  978:
    #####:  979:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  980:	{
    #####:  981:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  982:	    {
    #####:  983:	      j++;
        -:  984:	    }
        -:  985:	}
    #####:  986:      if (j < choice2)
        -:  987:	{
    #####:  988:	  return -1;				
        -:  989:	}
        -:  990:
        -:  991:      if (DEBUG) 
        -:  992:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  993:
        -:  994:      //increase supply count for choosen card by amount being discarded
    #####:  995:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  996:			
        -:  997:      //each other player gains a copy of revealed card
    #####:  998:      for (i = 0; i < state->numPlayers; i++)
        -:  999:	{
    #####: 1000:	  if (i != currentPlayer)
        -: 1001:	    {
    #####: 1002:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1003:	    }
        -: 1004:	}
        -: 1005:
        -: 1006:      //discard played card from hand
    #####: 1007:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1008:
        -: 1009:      //trash copies of cards returned to supply
    #####: 1010:      for (j = 0; j < choice2; j++)
        -: 1011:	{
    #####: 1012:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1013:	    {
    #####: 1014:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1015:		{
    #####: 1016:		  discardCard(i, currentPlayer, state, 1);
    #####: 1017:		  break;
        -: 1018:		}
        -: 1019:	    }
        -: 1020:	}			
        -: 1021:
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case cutpurse:
        -: 1025:
    #####: 1026:      updateCoins(currentPlayer, state, 2);
    #####: 1027:      for (i = 0; i < state->numPlayers; i++)
        -: 1028:	{
    #####: 1029:	  if (i != currentPlayer)
        -: 1030:	    {
    #####: 1031:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1032:		{
    #####: 1033:		  if (state->hand[i][j] == copper)
        -: 1034:		    {
    #####: 1035:		      discardCard(j, i, state, 0);
    #####: 1036:		      break;
        -: 1037:		    }
    #####: 1038:		  if (j == state->handCount[i])
        -: 1039:		    {
    #####: 1040:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1041:			{
        -: 1042:			  if (DEBUG)
        -: 1043:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1044:			}	
    #####: 1045:		      break;
        -: 1046:		    }		
        -: 1047:		}
        -: 1048:					
        -: 1049:	    }
        -: 1050:				
        -: 1051:	}				
        -: 1052:
        -: 1053:      //discard played card from hand
    #####: 1054:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1055:
    #####: 1056:      return 0;
        -: 1057:
        -: 1058:		
        -: 1059:    case embargo: 
        -: 1060:      //+2 Coins
    #####: 1061:      state->coins = state->coins + 2;
        -: 1062:			
        -: 1063:      //see if selected pile is in play
    #####: 1064:      if ( state->supplyCount[choice1] == -1 )
        -: 1065:	{
    #####: 1066:	  return -1;
        -: 1067:	}
        -: 1068:			
        -: 1069:      //add embargo token to selected supply pile
    #####: 1070:      state->embargoTokens[choice1]++;
        -: 1071:			
        -: 1072:      //trash card
    #####: 1073:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1074:      return 0;
        -: 1075:		
        -: 1076:    case outpost:
        -: 1077:      //set outpost flag
    #####: 1078:      state->outpostPlayed++;
        -: 1079:			
        -: 1080:      //discard card
    #####: 1081:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1082:      return 0;
        -: 1083:		
        -: 1084:    case salvager:
        -: 1085:      //+1 buy
    #####: 1086:      state->numBuys++;
        -: 1087:			
    #####: 1088:      if (choice1)
        -: 1089:	{
        -: 1090:	  //gain coins equal to trashed card
    #####: 1091:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1092:	  //trash card
    #####: 1093:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1094:	}
        -: 1095:			
        -: 1096:      //discard card
    #####: 1097:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1098:      return 0;
        -: 1099:		
        -: 1100:    case sea_hag:
        -: 1101:
    #####: 1102:		result = playSeaHag(currentPlayer, state);
        -: 1103:	
    #####: 1104:		return result;
        -: 1105:		
        -: 1106:    case treasure_map:
        -: 1107:      //search hand for another treasure_map
    #####: 1108:      index = -1;
    #####: 1109:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1110:	{
    #####: 1111:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1112:	    {
    #####: 1113:	      index = i;
    #####: 1114:	      break;
        -: 1115:	    }
        -: 1116:	}
    #####: 1117:      if (index > -1)
        -: 1118:	{
        -: 1119:	  //trash both treasure cards
    #####: 1120:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1121:	  discardCard(index, currentPlayer, state, 1);
        -: 1122:
        -: 1123:	  //gain 4 Gold cards
    #####: 1124:	  for (i = 0; i < 4; i++)
        -: 1125:	    {
    #####: 1126:	      gainCard(gold, state, 1, currentPlayer);
        -: 1127:	    }
        -: 1128:				
        -: 1129:	  //return success
    #####: 1130:	  return 1;
        -: 1131:	}
        -: 1132:			
        -: 1133:      //no second treasure_map found in hand
    #####: 1134:      return -1;
        -: 1135:    }
        -: 1136:	
    #####: 1137:  return -1;
        -: 1138:}
        -: 1139:
      420: 1140:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1141:{
        -: 1142:	
        -: 1143:  //if card is not trashed, added to Played pile 
      420: 1144:  if (trashFlag < 1)
        -: 1145:    {
        -: 1146:      //add card to played pile
      413: 1147:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      413: 1148:      state->playedCardCount++;
        -: 1149:    }
        -: 1150:	
        -: 1151:  //set played card to -1
      420: 1152:  state->hand[currentPlayer][handPos] = -1;
        -: 1153:	
        -: 1154:  //remove card from player's hand
      420: 1155:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1156:    {
        -: 1157:      //reduce number of cards in hand
        8: 1158:      state->handCount[currentPlayer]--;
        -: 1159:    }
      412: 1160:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1161:    {
        -: 1162:      //reduce number of cards in hand
    #####: 1163:      state->handCount[currentPlayer]--;
        -: 1164:    }
        -: 1165:  else 	
        -: 1166:    {
        -: 1167:      //replace discarded card with last card in hand
      412: 1168:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1169:      //set last card to -1
      412: 1170:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1171:      //reduce number of cards in hand
      412: 1172:      state->handCount[currentPlayer]--;
        -: 1173:    }
        -: 1174:	
      420: 1175:  return 0;
        -: 1176:}
        -: 1177:
       37: 1178:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1179:{
        -: 1180:  //Note: supplyPos is enum of choosen card
        -: 1181:	
        -: 1182:  //check if supply pile is empty (0) or card is not used in game (-1)
       37: 1183:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1184:    {
        2: 1185:      return -1;
        -: 1186:    }
        -: 1187:	
        -: 1188:  //added card for [whoseTurn] current player:
        -: 1189:  // toFlag = 0 : add to discard
        -: 1190:  // toFlag = 1 : add to deck
        -: 1191:  // toFlag = 2 : add to hand
        -: 1192:
       35: 1193:  if (toFlag == 1)
        -: 1194:    {
        1: 1195:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1196:      state->deckCount[player]++;
        -: 1197:    }
       34: 1198:  else if (toFlag == 2)
        -: 1199:    {
        1: 1200:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1201:      state->handCount[player]++;
        -: 1202:    }
        -: 1203:  else
        -: 1204:    {
       33: 1205:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       33: 1206:      state->discardCount[player]++;
        -: 1207:    }
        -: 1208:	
        -: 1209:  //decrease number in supply pile
       35: 1210:  state->supplyCount[supplyPos]--;
        -: 1211:	 
       35: 1212:  return 0;
        -: 1213:}
        -: 1214:
      350: 1215:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1216:{
        -: 1217:  int i;
        -: 1218:	
        -: 1219:  //reset coin count
      350: 1220:  state->coins = 0;
        -: 1221:
        -: 1222:  //add coins for each Treasure card in player's hand
     2114: 1223:  for (i = 0; i < state->handCount[player]; i++)
        -: 1224:    {
     1764: 1225:      if (state->hand[player][i] == copper)
        -: 1226:	{
     1362: 1227:	  state->coins += 1;
        -: 1228:	}
      402: 1229:      else if (state->hand[player][i] == silver)
        -: 1230:	{
       41: 1231:	  state->coins += 2;
        -: 1232:	}
      361: 1233:      else if (state->hand[player][i] == gold)
        -: 1234:	{
       18: 1235:	  state->coins += 3;
        -: 1236:	}	
        -: 1237:    }	
        -: 1238:
        -: 1239:  //add bonus
      350: 1240:  state->coins += bonus;
        -: 1241:
      350: 1242:  return 0;
        -: 1243:}
        -: 1244:
      208: 1245:int playAdventurer(int z, struct gameState *state, int currentPlayer, int cardDrawn, int *temphand){
        -: 1246:	
      208: 1247:	int drawntreasure=0;
        -: 1248:	
    32197: 1249:	while(drawntreasure<2){
        -: 1250:		
    31781: 1251:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -: 1252:		
        1: 1253:			shuffle(currentPlayer, state);
        -: 1254:		
        -: 1255:		}
        -: 1256:	
    31781: 1257:		drawCard(currentPlayer, state);
    31781: 1258:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1259:		
    31781: 1260:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
        -: 1261:		
      416: 1262:			drawntreasure++;
        -: 1263:		
        -: 1264:		}else{
        -: 1265:		
    31365: 1266:			temphand[z]=cardDrawn;
    31365: 1267:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    31365: 1268:			z++;
        -: 1269:		
        -: 1270:		}
        -: 1271:	}
        -: 1272:	
    31781: 1273:	while(z-1>=0){
        -: 1274:		
    31365: 1275:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    31365: 1276:		z=z-1;
        -: 1277:	
        -: 1278:	}
        -: 1279:
      208: 1280:	return 0;
        -: 1281:}
        -: 1282:
      103: 1283:int playSmithy(int currentPlayer, struct gameState *state, int handPos){
        -: 1284:	
        -: 1285:	int i;
        -: 1286:	
        -: 1287:	//+3 Cards
      309: 1288:	for (i = 0; i < 2; i++)//creating bug by running loop twice instead of three times
        -: 1289:	{
      206: 1290:		drawCard(currentPlayer, state);
        -: 1291:	}
        -: 1292:
        -: 1293:	//discard card from hand
      103: 1294:	discardCard(handPos, currentPlayer, state, 0);
        -: 1295:	
      103: 1296:	return 0;
        -: 1297:}
        -: 1298:
      101: 1299:int playSeaHag(int currentPlayer, struct gameState *state){
        -: 1300:	
        -: 1301:	int i;
        -: 1302:	
      402: 1303:	for (i = 0; i < state->numPlayers; i++){
        -: 1304:		
      301: 1305:		if (i == currentPlayer){//creating bug in SeaHag by changing logic operator from "!=" to "=="
        -: 1306:		
      101: 1307:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
      101: 1308:			state->deckCount[i]--;
      101: 1309:			state->discardCount[i]++;
      101: 1310:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1311:	
        -: 1312:		}
        -: 1313:	}
        -: 1314:	
      101: 1315:	return 0;
        -: 1316:}
        -: 1317:
    #####: 1318:int playMinion(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -: 1319:	
        -: 1320:	int i;
        -: 1321:	int j;
        -: 1322:	
        -: 1323:	//+1 action
    #####: 1324:	state->numActions++;
        -: 1325:	
        -: 1326:	//discard card from hand
    #####: 1327:	discardCard(handPos, currentPlayer, state, 0);
        -: 1328:			
    #####: 1329:	if (choice1)//+2 coins
        -: 1330:	{
    #####: 1331:		state->coins = state->coins + 2;
        -: 1332:	}		
    #####: 1333:	else if (choice2)//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1334:	{
        -: 1335:		
        -: 1336:		//discard hand
    #####: 1337:		while(numHandCards(state) > 0){
    #####: 1338:			discardCard(handPos, currentPlayer, state, 0);
        -: 1339:		}
        -: 1340:				
        -: 1341:		//draw 4
    #####: 1342:		for (i = 0; i < 4; i++){
    #####: 1343:			drawCard(currentPlayer, state);
        -: 1344:		}
        -: 1345:				
        -: 1346:		//other players discard hand and redraw if hand size > 4
    #####: 1347:		for (i = 0; i < state->numPlayers; i++){
        -: 1348:			
    #####: 1349:			if(i != currentPlayer){
        -: 1350:				
    #####: 1351:				if(state->handCount[i] > 4){
        -: 1352:					//discard hand
    #####: 1353:					while( state->handCount[i] > 0 ){
    #####: 1354:						discardCard(handPos, i, state, 0);
        -: 1355:					}
        -: 1356:							
        -: 1357:					//draw 4
    #####: 1358:					for(j = 0; j < 4; j++){
    #####: 1359:						drawCard(i, state);
        -: 1360:					}
        -: 1361:				}
        -: 1362:			}
        -: 1363:		}
        -: 1364:				
        -: 1365:	}
        -: 1366:	
    #####: 1367:	return 0;
        -: 1368:}
        -: 1369:
        3: 1370:int playSteward(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2, int choice3){
        -: 1371:	
        3: 1372:	if(choice1 == 1)
        -: 1373:	{
        -: 1374:		//+2 cards
        1: 1375:		drawCard(currentPlayer, state);
        1: 1376:		drawCard(currentPlayer, state);
        -: 1377:		
        2: 1378:	}else if (choice1 == 1){//creating bug in steward by switching checked value from 2 to 1, now option two will always execute the else part of the statement and operate like option 3
        -: 1379:		//+2 coins
    #####: 1380:		state->coins = state->coins + 2;
        -: 1381:	}else{
        -: 1382:		//trash 2 cards in hand
        2: 1383:		discardCard(choice2, currentPlayer, state, 1);
        2: 1384:		discardCard(choice3, currentPlayer, state, 1);
        -: 1385:	}
        -: 1386:	
        -: 1387:	//discard card from hand
        3: 1388:	discardCard(handPos, currentPlayer, state, 0);
        -: 1389:	
        3: 1390:	return 0;
        -: 1391:}
        -: 1392://end of dominion.c
